# -*- coding: utf-8 -*-

#  Программа для числовой оцифровки графика, заданного картинкой
#  
#  Грузится входной bmp-файл  (graph.bmp)  и отображается на экране,
#  пользователь наводит курсор мыши на точки графика и нажимает левую кнопку мыши;
#  после того, как будут отмечены все необходимые точки,
#  выйти из программы,
#  результат измерения будет записан в файл       graph.csv
#
#                                                           Григорий Коданёв, 2024
import cv2

# Название и, таким образом, заголовок окна, в котором следует выводить на экран интерфейс данной программы
WINDOW_NAME = "Paper Graph"

ESC_KEY_ID = 27 # Числовой идентификатор клавиши [Esc] на клавиатуре
IMAGE_SHAPE_PROP_WIDTH = 1 # Числовой идентификатор показателя ширины изображения в кортеже shape, являющемся параметром массивов NumPy и, таким образом, изображений OpenCV

# Левая, верхняя границы, высота и ширина (именно в таком порядке) поля графика
IB,ID,IA,IC = 201,64,2569,1557

# Физические значения по краям поля графика (физические пределы графика)
SX1,SX2,SY1,SY2 = 350,1050,0,250


LMBPressed = False # Флаг, указывающий, нажата ли в настоящий момент левая кнопка мыши (для исключения нажатий, производимых при нахождении указателя вне окна данной программы; вначале НЕ должен быть активен)
fileCreated = False # Флаг, указывающий, был ли создан файл для записи координат


# Обработчик использования мыши
def handleMouseUsage(event, mx, my, flags, param): # event - событие, связанное с использованием мыши, mx и my - координаты точки изображения, в которой находится указатель мыши,
    # flags - специфическое условие использования мыши, param - произвольный параметр, передаваемый в функцию (последние 2 параметра в данной программе не используются)

    # Глобальные переменные:
    # LMBPressed - флаг, указывающий, нажата ли в настоящий момент левая кнопка мыши, fileCreated - флаг, указывающий, был ли создан файл для записи координат из координатной плоскости, на
    # которой находится график, присутствующий в изображении из файла, img - изображение, загруженное из файла, с метками, если таковые были установлены с помощью мыши, dispImg - изображение
    # интерфейса программы, outFile - файл, в который следует записывать координаты из координатной плоскости, на которой находится график, присутствующий в изображении из файла
    global LMBPressed,fileCreated,img,dispImg,outFile

##    if mx<IB or my<ID or mx>IA+IB or my>IC+ID: # Если указатель мыши находится вне графика:
##        garb, dispImg = dispImg, img.copy() # Ссылка (garb) на изображение для вывода на экран с целью последующего удаления из памяти и новое изображение для вывода на экран: без координат точки, на которую указывает указатель мыши, для того чтобы на экране не отображалось старых координат
##        del garb
##        return # Прервать выполнение подпрограммы

    if event == cv2.EVENT_LBUTTONDOWN: ## Нажатие левой кнопки мыши
        LMBPressed = True # Сделать активным флаг нажатия левой кнопки мыши
    else: ## ДРУГОЕ СОБЫТИЕ МЫШИ
        x, y = ((mx-IB)*(SX2-SX1))/IA+SX1, SY2-(SY2-SY1)*(my-ID)/IC # Координаты точки, над которой находится указатель мыши, на координатной плоскости, на которой находится график
        if event == cv2.EVENT_MOUSEMOVE: ## Перемещение указателя мыши
            garb, dispImg = dispImg, img.copy() # Ссылка (garb) на изображение для вывода на экран с целью последующего удаления из памяти и новое изображение для вывода на экран: без координат точки, на которую указывает указатель мыши, для того чтобы добавить в изображение новые координаты
            del garb
            cv2.putText(dispImg, "x="+str(x)+", y="+str(y), (dispImg.shape[IMAGE_SHAPE_PROP_WIDTH]//2-170, 35), cv2.FONT_HERSHEY_SIMPLEX, 1.4, (0, 192, 0), 3) # Вывести на экран текущие значения координат точки на графике, на которую указывает указатель мыши, шрифтом зелёного цвета
        elif event == cv2.EVENT_LBUTTONUP and LMBPressed: ## Отпускание левой кнопки мыши, при этом активен флаг её нажатия
            LMBPressed = False # Сделать неактивным флаг нажатия левой кнопки мыши
            if not fileCreated: # Если не активен флаг создания файла для записи координат:
                outFile = open("graph.csv", "wt") # Создать и открыть файл для их записи
                fileCreated = True # Сделать активным флаг создания файла для записи координат
            outFile.write(str(x) + ";" + str(y) + "\n") # Записать координаты точки, над которой находится указатель мыши, на координатной плоскости, на которой находится график, в созданный и открытый для этого файл
            cv2.circle(img, (mx, my), 10, (255, 0, 0), cv2.FILLED) # Добавить в изображение графика на место щелчка левой кнопкой мыши круглую метку синего цвета


img = cv2.imread("graph.bmp") # Изображение графика из файла
dispImg = img.copy() # Изображение, которое следует выводить на экран (вначале оно точно такое же, как изображение графика из файла)

cv2.namedWindow(WINDOW_NAME,cv2.WINDOW_AUTOSIZE) # Создание окна с заданным названием с блокировкой изменения размеров окна (за исключением разворота окна на весь экран)
cv2.setMouseCallback(WINDOW_NAME,handleMouseUsage) # Установка обработчика использования мыши и окна, к которому следует применить обработчик

while cv2.waitKey(1)!=ESC_KEY_ID and cv2.getWindowProperty(WINDOW_NAME,cv2.WND_PROP_VISIBLE)>0: # Пока не нажата клавиша [Esc] на клавиатуре и открыто окно программы,
    cv2.imshow(WINDOW_NAME,dispImg) # выводить в окне программы изображения интерфейса, формируемые в ходе работы программы

cv2.destroyAllWindows() # Уничтожить все окна, созданные с помощью библиотечного модуля OpenCV
del img
del dispImg
if fileCreated: # Если был создан файл для записи координат (в таком случае он затем был открыт)
    outFile.close()
